package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSmplException;
import smpl.values.SmplValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    :};

init with {:
    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  :};
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LSTCONCAT,LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMI, COLON, COMMA, NEG, PERIOD, LVEC, RVEC;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW;

// bitwise opertors
terminal BAND, BOR, BNOT;

// relational operators
terminal EQ, GT, LT, LE, GE, NEQ;

// logical operators
terminal LNOT, LAND, LOR;

// assignment operator
terminal ASSIGN;

// key words
terminal PAIR, PAIRCHECK, CAR, CDR, PRINT, PRINTLN, LIST, EMPTYLIST, PROC, SUBSTR;
terminal EQV, EQUAL, CALL, LAZY, DEF, READ, READINT, IF, ELSE, THEN, CASE, SIZE, LET, BE;
<<<<<<< HEAD
terminal SIN, COS, TAN, SEC, COSEC, COT;

=======
>>>>>>> refs/remotes/OrrenJ/master

// terminals with values
terminal Integer INTEGER;
terminal Double REAL;
terminal boolean BOOL;
terminal String CHARACTER;
terminal String STRING;
terminal String VARIABLE;

/* Non terminals */
non terminal SmplProgram program;
non terminal StmtSequence stmtList;
non terminal Exp stmt;
non terminal StmtDefinition definition;
non terminal StmtPrint print;

non terminal Exp expression;

non terminal StmtLet letStmt;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp builtIn;

non terminal Exp pair;
non terminal Exp pairCheck;
non terminal Exp car;
non terminal Exp cdr;

non terminal Exp substr;

non terminal Exp list;
non terminal Exp vector;
non terminal ExpVectorRef vectorRef;
non terminal Exp size;

non terminal AbstractMap.Entry<String,ArrayList<String>> procHead;
non terminal ExpProcedure procExp;
non terminal ArrayList<String> params;
non terminal ArrayList<String> paramsAux;

non terminal ExpProcedureCall procCallExp;
non terminal ArrayList<Exp> args;
non terminal ArrayList<Exp> argsAux;
non terminal Exp subvector;
non terminal ArrayList<Exp> vargs;
non terminal ArrayList<Exp> vargsAux;

non terminal Exp arithExp;
non terminal Exp logicAnd;
non terminal Exp logicNot;
non terminal Exp relation;
non terminal Exp bitandor;
non terminal Exp count;
non terminal Exp term;
non terminal Exp bitnot;
non terminal Exp power;
non terminal Exp posneg;
non terminal Exp factor;
non terminal SmplValue<?> val;
non terminal SmplValue<?> boolVal;
non terminal SmplValue<?> strVal;

non terminal Exp eqv;
non terminal Exp equal;

non terminal Exp call;

non terminal Exp lazy;
non terminal Exp def;

non terminal Exp read;
non terminal Exp readint;

non terminal Exp expIf;
non terminal Exp expElse;

non terminal Exp expCase;
non terminal ExpPair _case;
non terminal ArrayList<ExpPair> cases;
non terminal ArrayList<ExpPair> casesAux;
<<<<<<< HEAD

non terminal Exp concatList;

non terminal Exp trigFunctions;


non terminal  quadratic;
non terminal  Polynomial polynomial;


=======
>>>>>>> refs/remotes/OrrenJ/master

non terminal Exp concatList;

non terminal empty;

/* Grammar rules */

precedence left COLON, ELSE, RPAREN;

program ::= stmtList:s {: RESULT = new SmplProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
				lst.add(s);
				RESULT = lst;
			:} |
			stmt:s {:
				RESULT = new StmtSequence(s);
			:};

stmt ::= definition:d SEMI {: RESULT = d; :} |
			expression:e SEMI {: RESULT = e; :} |
			def:d {: RESULT = d; :};

definition ::= params:p ASSIGN args:a {:
				RESULT = new StmtDefinition(p, a); 
			:} | vectorRef:v ASSIGN expression:e {:
				RESULT = new StmtDefinition(v,e);
			:};

print ::= PRINT LPAREN expression:e RPAREN {:
				RESULT = new StmtPrint(e); :} |
			PRINTLN LPAREN expression:e RPAREN {:
				RESULT = new StmtPrint(e, '\n'); 
			:};

expression ::= expCase:c {: RESULT = c; :} |
				letStmt:l {: RESULT = l; :} |
				print:p {: RESULT = p; :} |
				expIf:e {: RESULT = e; :} |
				procExp:p {: RESULT = p; :} |
				LBRACE stmtList:body RBRACE {: RESULT = body; :} |
				arithExp:a {: RESULT = a; :};

letStmt ::= LET LPAREN bindings:bs RPAREN expression:body {:
				RESULT = new StmtLet(bs, body);
			:};

binding ::= VARIABLE:v EQ expression:e {:
				RESULT = new Binding(v, e);
			:} | VARIABLE:v BE expression:e {:
				RESULT = new Binding(v, e);
			:};

bindings ::= binding:b bindingsAux:bl {:
				bl.add(0,b);
				RESULT = bl;
				:} |
			empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
				bl.add(0,b);
				RESULT = bl;
				:} |
			empty {: RESULT = new ArrayList(); :};

procHead ::= PROC LPAREN params:ps RPAREN {:
				RESULT = new AbstractMap.SimpleEntry(null,ps);
			:} |
			PROC LPAREN params:ps PERIOD VARIABLE:v RPAREN {:
				RESULT = new AbstractMap.SimpleEntry(v,ps);
			:} |
			PROC VARIABLE:v {:
				RESULT = new AbstractMap.SimpleEntry(v,null);
			:};

procExp ::= procHead:h expression:body {:
				RESULT = new ExpProcedure(h.getValue(), body, h.getKey());
			:} | procHead:h LPAREN args:a RPAREN {:
				RESULT = new ExpProcedure(h.getValue(), a, h.getKey());
			:};

params ::= VARIABLE:v paramsAux:pl {:
			pl.add(0,v);
			RESULT = pl;
		:} | empty {:
			RESULT = new ArrayList();
		:};

paramsAux ::= COMMA VARIABLE:v paramsAux:pl {:
				pl.add(0,v);
				RESULT = pl;
			:} | empty {:
				RESULT = new ArrayList();
			:};

procCallExp ::= LPAREN expression:e RPAREN LPAREN args:a RPAREN {:
				RESULT = new ExpProcedureCall(e, a);
			:} | VARIABLE:v LPAREN args:a RPAREN {:
				RESULT = new ExpProcedureCall(v, a);
			:};

arithExp ::= arithExp:e LOR logicAnd:a {:
				RESULT = new ExpLogicOr(e, a); :} |
			logicAnd:a {: RESULT = a; :};

logicAnd ::= logicAnd:a LAND logicNot:n {:
				RESULT = new ExpLogicAnd(a, n); :} |
			logicNot:n {: RESULT = n; :};

logicNot ::= LNOT relation:r {:
				RESULT = new ExpLogicNot(r); :} |
			relation:r {: RESULT = r; :};

relation ::= relation:r EQ bitandor:ao {:
				RESULT = new ExpEq(r, ao); :} |
			relation:r GT bitandor:ao {:
				RESULT = new ExpGt(r, ao); :} |
			relation:r LT bitandor:ao {:
				RESULT = new ExpLt(r, ao); :} |
			relation:r LE bitandor:ao {:
				RESULT = new ExpLe(r, ao); :} |
			relation:r GE bitandor:ao {:
				RESULT = new ExpGe(r, ao); :} |
			relation:r NEQ bitandor:ao {:
				RESULT = new ExpNeq(r, ao); :} |
			bitandor:ao {: RESULT = ao; :};

bitandor ::= bitandor:ao BAND count:c {:
				RESULT = new ExpBitWiseAnd(ao, c); :} |
			bitandor:ao BOR count:c {:
				RESULT = new ExpBitWiseOr(ao, c); :} |
			count:c {: RESULT = c; :};

count ::= count:c PLUS term:t {:
				RESULT = new ExpAdd(c, t); :} |
			count:c MINUS term:t {:
				RESULT = new ExpSub(c, t); :} |
			term:t {: RESULT = t; :};

term ::= term:t MUL bitnot:b {:
			RESULT = new ExpMul(t, b); :} | 
		term:t DIV bitnot:b {:
			RESULT = new ExpDiv(t, b); :} | 
		term:t MOD bitnot:b {:
			RESULT = new ExpMod(t, b); :} | 
		bitnot:b {: RESULT = b; :};

bitnot ::= BNOT power:p {: RESULT = new ExpBitWiseNot(p); :} |
		power:p {: RESULT = p; :};

power ::= power:p POW posneg:f {:
			RESULT = new ExpPow(p, f); :} |
		posneg:f {: RESULT = f; :};

posneg ::= NEG factor:f {: RESULT = new ExpMul(new ExpLit(-1), f); :} |
		MINUS factor:f {: RESULT = new ExpMul(new ExpLit(-1), f); :} |
		factor:f {: RESULT  = f; :};

factor ::= val:n {: RESULT = new ExpLit(n); :} |
		boolVal:bv {: RESULT = new ExpLit(bv); :} |
		strVal:sv {: RESULT = new ExpLit(sv); :} |
		builtIn:b {: RESULT = b; :} |
		VARIABLE:var {: RESULT = new ExpVar(var); :} |
		vectorRef:vr {: RESULT = vr; :} |
		procCallExp:pc {: RESULT = pc; :} |
		LPAREN expression:e RPAREN {: RESULT = e; :};

val ::= INTEGER:ilit {: RESULT = SmplValue.make(ilit); :} |
		REAL: rlit {: RESULT = SmplValue.make(rlit); :};

strVal ::= 	STRING:strlit {: RESULT = SmplValue.makeStrEscaped(strlit); :} | 
		CHARACTER:chlit {: RESULT = SmplValue.makeChar(chlit); :};

boolVal ::= BOOL:blit {: RESULT = SmplValue.make(blit); :};

builtIn ::= pair:p {: RESULT = p; :} |
			pairCheck:pc {:RESULT = pc; :} |
			car:c {: RESULT = c; :} |
			cdr:c {: RESULT = c; :} |
			list:l {: RESULT = l; :} |
			vector:v {: RESULT = v; :} |
			size:s {: RESULT = s; :} |
			substr:s {: RESULT = s; :}|
			eqv:e {: RESULT = e; :}|
			equal:e {: RESULT = e; :}|
			call:c {: RESULT = c; :}|
			lazy:l {: RESULT = l; :}|
			concatList:c {: RESULT = c; :}|
			read:r {: RESULT = r; :}|
			readint:r {: RESULT = r; :}|
			trigFunctions:t {: RESULT = t; :};

pair ::= PAIR LPAREN expression:e1 COMMA expression:e2 RPAREN {:
			RESULT = new ExpPair(e1, e2); :};

pairCheck ::= PAIRCHECK LPAREN expression:e RPAREN {:
			RESULT = new ExpPairCheck(e); :};

car ::= CAR LPAREN expression:e RPAREN {:
			RESULT = new ExpCar(e); :};

cdr ::= CDR LPAREN expression:e RPAREN {:
			RESULT = new ExpCdr(e); :};

substr ::= SUBSTR LPAREN expression:e1 COMMA expression:e2 COMMA expression:e3 RPAREN {:
			RESULT = new ExpSubStr(e1, e2, e3);
		:};

args ::= expression:e argsAux:al {:
			al.add(0,e);
			RESULT = al;
		:} | empty {:
			RESULT = new ArrayList();
		:};

argsAux ::= COMMA expression:e argsAux:al {:
			al.add(0,e);
			RESULT = al;
		:} | empty {:
			RESULT = new ArrayList();
		:};

list ::= LIST LPAREN args:a RPAREN {:
			RESULT = new ExpList(a); :} |
		LBRACKET args:a RBRACKET {:
			RESULT = new ExpList(a); :} |
		EMPTYLIST {: RESULT = new ExpList(); :};

vector ::= LVEC vargs:v RVEC {:
			RESULT = new ExpVector(v);
		:};

subvector ::= expression:e1 COLON expression:e2 {:
				RESULT = new ExpSubVector(e1,e2);
			:} | expression:e {: 
				RESULT = e; 
			:};

vargs ::= subvector:s vargsAux:vl {:
			vl.add(0,s);
			RESULT = vl;
		:} | empty {:
			RESULT = new ArrayList();
		:};

vargsAux ::= COMMA subvector:s vargsAux:vl {:
			vl.add(0,s);
			RESULT = vl;
		:} | empty {:
			RESULT = new ArrayList();
		:};

vectorRef ::= VARIABLE:v LBRACKET expression:n RBRACKET {:
			RESULT = new ExpVectorRef(v,n);
		:};

size ::= SIZE LPAREN expression:e RPAREN {:
			RESULT = new ExpSize(e);
		:};

eqv ::= EQV LPAREN expression:a COMMA expression:b RPAREN {:
		RESULT = new ExpEqv(a,b);
	:};

equal ::= EQUAL LPAREN expression:a COMMA expression:b RPAREN {:
		RESULT = new ExpEqual(a,b);
	:};	

def ::= DEF VARIABLE:v stmt:e {:
		RESULT = new ExpDef(v,e); 
	:};

call ::= CALL LPAREN expression:p COMMA expression:l RPAREN {:
			RESULT = new ExpCall(p,l);
		:} | 
		CALL LPAREN expression:p RPAREN {:
			RESULT = new ExpCall(p);
		:};

lazy ::= LAZY LPAREN expression:e RPAREN{:
		RESULT = new ExpLazy(e);
	:};

concatList ::= list:first LSTCONCAT list:second{:
		RESULT = new ExpConcatLst(first,second);
	:}|
	VARIABLE:first LSTCONCAT VARIABLE:second{:
		RESULT = new ExpConcatLst(first,second);
	:}|
	list:first LSTCONCAT VARIABLE:second{:
		RESULT = new ExpConcatLst(first,second);
	:}|
	VARIABLE:first LSTCONCAT list:second{:
		RESULT = new ExpConcatLst(first,second);
	:};

read ::= READ LPAREN RPAREN {:
		RESULT = new ExpRead();
	:};

readint ::= READINT LPAREN RPAREN {:
		RESULT = new ExpReadInt();
	:};

expIf ::= IF expression:con THEN expression:ifArg expElse:elseArg{:
		RESULT = new ExpIf(con, ifArg, elseArg);
	:};

expElse ::= ELSE expression:elseArg {:
		RESULT = elseArg;
	:} | empty {:
		RESULT = null;
	:};

expCase ::= CASE LBRACE cases:c RBRACE {:
				RESULT = new ExpCase(c);
			:};

_case ::= expression:c COLON expression:r {:
			RESULT = new ExpPair(c,r);
		:} | ELSE COLON expression:r {:
			RESULT = new ExpPair(new ExpLit(SmplValue.makeStrEscaped("else")),r); :};

cases ::= _case:c casesAux:ca {:
			ca.add(0,c);
			RESULT = ca;
		:} | empty {:
			RESULT = new ArrayList();
		:};

casesAux ::= COMMA _case:c casesAux:ca {:
			ca.add(0,c);
			RESULT = ca;
		:} | empty {:
			RESULT = new ArrayList();
		:};
<<<<<<< HEAD

//new functionality
trigFunctions ::= SIN LPAREN expression: e RPAREN {:
					RESULT = new ExpSin(e);
				:}|
				  COS LPAREN expression: e RPAREN {:
				  	RESULT = new ExpCos(e); 
				:}|
				  TAN LPAREN expression: e RPAREN {:
				  	RESULT = new ExpTan(e);
				:}|
				  SEC LPAREN expression: e RPAREN {:
				  	RESULT = new ExpSec(e);
				 :}|
				  COSEC LPAREN expression: e RPAREN {:
				  	RESULT = new ExpCosec(e);
				 :}|
				  COT LPAREN expression: e RPAREN {:
				  	RESULT = new ExpCot(e);
				 :};


=======
>>>>>>> refs/remotes/OrrenJ/master

empty ::= ;
