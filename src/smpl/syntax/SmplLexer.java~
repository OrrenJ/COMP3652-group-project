/* The following code was generated by JFlex 1.4.3 on 12/20/16 12:55 AM */

package smpl.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/20/16 12:55 AM from the specification file
 * <tt>SmplLexer</tt>
 */
public class SmplLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
<<<<<<< HEAD
    "\10\0\1\2\1\2\1\13\1\15\1\16\1\1\22\0\1\2\1\32"+
    "\1\12\1\61\1\0\1\21\1\25\1\0\1\43\1\44\1\20\1\6"+
    "\1\47\1\7\1\5\1\17\2\72\10\4\1\23\1\50\1\31\1\24"+
    "\1\30\1\60\1\51\6\11\24\3\1\45\1\14\1\46\1\22\1\3"+
    "\1\0\1\36\1\54\1\56\1\37\1\53\1\10\1\3\1\70\1\57"+
    "\2\3\1\52\1\3\1\33\1\34\1\55\1\65\1\40\1\62\1\35"+
    "\1\64\1\66\1\3\1\71\1\67\1\63\1\41\1\26\1\42\1\27"+
    "\6\0\1\15\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";
=======
    "\10\0\1\2\1\2\1\13\1\0\1\2\1\1\22\0\1\2\1\30"+
    "\1\12\1\57\1\0\1\17\1\23\1\0\1\41\1\42\1\16\1\6"+
    "\1\45\1\7\1\5\1\15\2\70\10\4\1\21\1\46\1\27\1\22"+
    "\1\26\1\56\1\47\6\11\24\3\1\43\1\14\1\44\1\20\1\3"+
    "\1\0\1\34\1\52\1\54\1\35\1\51\1\10\1\3\1\66\1\55"+
    "\2\3\1\50\1\3\1\31\1\32\1\53\1\63\1\36\1\60\1\33"+
    "\1\62\1\64\1\3\1\67\1\65\1\61\1\37\1\24\1\40\1\25"+
    "\uff81\0";
>>>>>>> refs/remotes/OrrenJ/master

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\1\1\6"+
<<<<<<< HEAD
    "\1\0\1\7\1\10\1\11\1\12\4\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\6\1"+
    "\1\0\1\1\15\0\1\24\2\0\1\25\1\0\1\26"+
    "\1\0\1\27\5\1\1\30\5\1\1\31\5\1\1\32"+
    "\1\33\1\34\1\35\3\0\3\1\1\36\1\37\1\40"+
    "\1\41\1\0\1\42\1\43\1\44\1\45\1\0\1\46"+
    "\6\0\1\1\1\47\1\1\1\50\2\1\1\51\7\1"+
    "\1\52\1\53\1\54\2\1\1\55\1\56\2\57\1\0"+
    "\1\60\1\61\1\62\2\1\1\63\1\64\1\65\1\66"+
    "\1\67\3\0\1\26\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\1\1\76\1\77\1\100\2\1\1\101\1\102"+
    "\1\0\1\103\1\1\1\104\3\0\1\26\2\0\2\1"+
    "\1\105\1\106\1\107\1\0\1\1\2\0\1\26\3\0"+
    "\1\26\1\0\1\1\1\110\1\1\1\111\1\26\2\0"+
    "\1\112\1\113\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
=======
    "\2\0\1\7\1\10\4\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\6\1\1\0\1\1"+
    "\17\0\1\22\2\0\1\23\1\0\1\24\1\0\1\25"+
    "\4\1\1\26\5\1\1\27\4\1\1\30\1\31\1\32"+
    "\1\33\3\0\2\1\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\0\1\42\1\43\1\44\1\45\1\0\1\46"+
    "\6\0\2\1\1\47\2\1\1\50\7\1\1\51\2\1"+
    "\1\52\1\53\2\54\1\0\1\55\2\1\1\56\1\57"+
    "\1\60\1\61\1\62\3\0\1\24\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\1\1\71\1\72\1\73\1\1"+
    "\1\74\1\75\1\0\1\76\1\1\1\77\3\0\1\24"+
    "\2\0\2\1\1\100\1\101\1\0\1\1\2\0\1\24"+
    "\3\0\1\24\1\0\1\1\1\102\1\1\1\103\1\24"+
    "\2\0\1\104\1\105\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
>>>>>>> refs/remotes/OrrenJ/master
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u01d8\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u033a\0\u01d8\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\354"+
    "\0\354\0\u084c\0\u01d8\0\u0887\0\u08c2\0\u08fd\0\u01d8\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u01d8\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\166\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\166\0\u01d8\0\u01d8\0\u01d8\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u0e0f\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u0e4a\0\u01d8\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\166\0\u1022\0\166\0\u105d"+
    "\0\u1098\0\166\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\166\0\u1270\0\166\0\u12ab\0\u12e6\0\166\0\u0cad"+
    "\0\u01d8\0\u1321\0\u135c\0\u0d23\0\166\0\166\0\u1397\0\u13d2"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u01d8\0\166\0\u14f9\0\166\0\166\0\166\0\u1534"+
    "\0\u01d8\0\u156f\0\166\0\u15aa\0\u15e5\0\166\0\166\0\u1620"+
    "\0\166\0\u165b\0\u01d8\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u01d8\0\u186e\0\166\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u0f71\0\u1a81"+
    "\0\u1abc\0\u01d8\0\u1af7\0\166\0\u1448\0\u1995\0\u1b32\0\166"+
    "\0\166\0\u1a0b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
=======
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\u011d\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u0201\0\u0201\0\u0201\0\u0201\0\u031e\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\344\0\344\0\u0876\0\u0201\0\u08af\0\u08e8\0\u0921\0\u0201"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0201\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\162\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\162"+
    "\0\u0201\0\u0201\0\u0201\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0d5c\0\u0201"+
    "\0\u0201\0\u0201\0\u0201\0\u0d95\0\u0201\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\162\0\u0f96\0\u0fcf"+
    "\0\162\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\162\0\u1197\0\u11d0\0\162\0\u0c3f\0\u0201\0\u1209\0\u1242"+
    "\0\u0cb1\0\u127b\0\u12b4\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u0201\0\162\0\u13d1\0\162"+
    "\0\162\0\162\0\u140a\0\u0201\0\u1443\0\162\0\u147c\0\162"+
    "\0\162\0\u14b5\0\162\0\u14ee\0\u0201\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u0201\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u0eb2"+
    "\0\u18f0\0\u1929\0\u0201\0\u1962\0\162\0\u1326\0\u180c\0\u199b"+
    "\0\162\0\162\0\u187e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
>>>>>>> refs/remotes/OrrenJ/master
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
<<<<<<< HEAD
    "\2\4\1\11\1\2\2\0\1\3\1\12\1\0\1\13"+
    "\1\0\1\14\3\0\1\15\3\0\1\16\1\4\1\17"+
    "\1\4\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\0\1\41\1\42\7\4\1\5\6\0"+
    "\1\43\1\44\10\0\1\45\1\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\55\1\0\1\56"+
    "\1\0\1\57\37\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\6\4\2\0\11\4\3\0\1\4\1\5\1\60"+
    "\4\4\21\0\6\4\11\0\6\4\2\0\10\4\1\5"+
    "\4\0\1\60\65\0\1\60\3\0\1\4\1\5\1\61"+
    "\4\4\21\0\6\4\11\0\6\4\1\0\1\62\10\4"+
    "\1\5\12\11\1\63\1\0\1\64\56\11\17\0\1\65"+
    "\1\66\213\0\1\67\27\0\2\4\1\0\4\4\21\0"+
    "\1\4\1\70\4\4\11\0\6\4\2\0\11\4\3\0"+
    "\2\4\1\0\4\4\21\0\3\4\1\71\2\4\11\0"+
    "\6\4\2\0\6\4\1\72\2\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\1\4\1\73\4\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\1\4\1\74\4\4\2\0\11\4\23\0\1\75\52\0"+
    "\2\4\1\0\4\4\21\0\3\4\1\76\2\4\11\0"+
    "\1\4\1\77\3\4\1\100\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\1\101\5\4\2\0"+
    "\3\4\1\102\5\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\1\4\1\103\4\4\2\0\11\4\3\0"+
    "\2\4\1\0\4\4\21\0\3\4\1\104\1\4\1\105"+
    "\11\0\6\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\21\0\1\4\1\106\1\4\1\107\1\110\1\4\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\2\4\1\111"+
    "\1\4\21\0\6\4\11\0\6\4\2\0\11\4\10\0"+
    "\1\112\24\0\1\113\15\0\1\114\1\115\1\0\1\116"+
    "\12\0\1\117\4\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\1\4\1\120\3\4\1\121\2\0\2\4\1\122"+
    "\6\4\1\0\2\123\10\0\1\123\2\0\1\123\55\0"+
    "\2\124\10\0\1\124\2\0\1\124\55\0\2\125\10\0"+
    "\1\125\2\0\1\125\55\0\2\126\10\0\1\126\2\0"+
    "\1\126\100\0\1\127\47\0\2\130\10\0\1\130\2\0"+
    "\1\130\55\0\2\131\10\0\1\131\2\0\1\131\55\0"+
    "\2\132\10\0\1\132\2\0\1\132\55\0\2\133\10\0"+
    "\1\133\2\0\1\133\5\0\1\134\47\0\2\135\10\0"+
    "\1\135\2\0\1\135\5\0\1\136\72\0\1\137\106\0"+
    "\1\140\65\0\1\141\113\0\1\115\14\0\1\117\1\0"+
    "\1\11\1\0\11\11\1\0\1\11\2\0\54\11\1\65"+
    "\1\0\11\65\1\0\1\65\2\0\54\65\17\66\1\142"+
    "\1\143\52\66\3\0\2\4\1\0\4\4\21\0\2\4"+
    "\1\144\3\4\11\0\6\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\1\145\5\4\11\0\6\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\1\4\1\146\4\4\2\0\11\4\3\0\2\4\1\0"+
    "\2\4\1\147\1\4\21\0\6\4\11\0\6\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\3\4\1\150"+
    "\2\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\6\4\2\0\1\4\1\151"+
    "\7\4\3\0\2\4\1\0\4\4\21\0\2\4\1\152"+
    "\3\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\6\4\2\0\1\153\10\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\6\4"+
    "\2\0\1\154\10\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\6\4\2\0\2\4\1\155\1\4\1\156"+
    "\4\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\5\4\1\157\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\21\0\1\4\1\160\4\4\11\0\5\4\1\161\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\2\4\1\162"+
    "\3\4\11\0\6\4\2\0\1\163\10\4\3\0\2\4"+
    "\1\0\4\4\21\0\5\4\1\164\11\0\1\165\5\4"+
    "\2\0\1\166\10\4\3\0\2\4\1\0\4\4\21\0"+
    "\5\4\1\167\11\0\6\4\2\0\11\4\72\0\1\170"+
    "\4\171\1\172\3\171\2\172\2\0\1\173\21\171\2\172"+
    "\13\171\2\172\1\171\1\172\13\171\1\172\4\0\1\174"+
    "\3\0\2\174\24\0\2\174\13\0\2\174\1\0\1\174"+
    "\13\0\1\174\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\4\4\1\175\1\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\1\176\5\4\11\0\6\4\2\0"+
    "\1\4\1\177\7\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\2\4\1\200\3\4\2\0\11\4\1\0"+
    "\2\201\10\0\1\201\2\0\1\201\55\0\2\202\10\0"+
    "\1\202\2\0\1\202\55\0\2\203\10\0\1\203\2\0"+
    "\1\203\55\0\2\204\10\0\1\204\2\0\1\204\55\0"+
    "\2\205\10\0\1\205\2\0\1\205\113\0\1\206\33\0"+
    "\17\66\1\207\1\210\71\66\1\211\1\143\52\66\1\0"+
    "\2\212\2\4\1\0\4\4\1\0\1\212\2\0\1\212"+
    "\14\0\6\4\11\0\6\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\1\213\5\4\11\0\6\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\4\4\1\214"+
    "\1\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\6\4\2\0\5\4\1\215"+
    "\3\4\3\0\2\4\1\0\4\4\21\0\2\4\1\216"+
    "\3\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\1\4\1\217\4\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\3\4\1\220"+
    "\2\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\6\4\1\221\1\0\11\4"+
    "\3\0\2\4\1\0\4\4\21\0\5\4\1\222\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\4\4\1\223\1\4\2\0\11\4\3\0"+
    "\2\4\1\0\4\4\21\0\1\224\5\4\11\0\6\4"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\1\4\1\225\4\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\1\226\5\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\1\4\1\227\4\4\2\0\11\4\4\0\1\230\3\0"+
    "\2\230\24\0\2\230\13\0\2\230\1\0\1\230\13\0"+
    "\1\230\1\171\1\0\11\171\1\0\1\171\2\0\54\171"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\1\4"+
    "\1\231\4\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\6\4\2\0\1\232\10\4\1\0"+
    "\2\233\10\0\1\233\2\0\1\233\54\0\1\234\1\66"+
    "\11\234\1\66\1\234\2\66\1\207\1\235\52\234\17\236"+
    "\1\237\1\240\52\236\17\0\1\234\1\241\55\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\5\4\1\242\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\1\243\5\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\6\4\1\244\1\0\11\4\3\0"+
    "\2\4\1\0\4\4\21\0\2\4\1\245\3\4\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\4\4\1\246\1\4\2\0\11\4\4\0"+
    "\1\247\3\0\2\247\24\0\2\247\13\0\2\247\1\0"+
    "\1\247\13\0\1\247\3\0\2\4\1\0\4\4\21\0"+
    "\2\4\1\250\3\4\11\0\6\4\2\0\11\4\1\234"+
    "\1\66\11\234\1\66\1\234\2\66\1\207\1\251\52\234"+
    "\1\252\1\236\11\252\1\236\1\252\2\236\1\253\1\254"+
    "\52\252\17\236\1\255\1\240\52\236\17\241\1\252\1\256"+
    "\52\241\17\236\1\257\1\240\52\236\20\241\1\260\52\241"+
    "\3\0\2\4\1\0\4\4\21\0\1\261\5\4\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\6\4\1\262\1\0\11\4\3\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\1\263\5\4\2\0"+
    "\11\4\4\0\1\171\3\0\2\171\24\0\2\171\13\0"+
    "\2\171\1\0\1\171\13\0\1\171\3\0\2\4\1\0"+
    "\4\4\21\0\5\4\1\264\11\0\6\4\2\0\11\4"+
    "\1\234\1\66\11\234\1\66\1\234\2\66\1\265\1\251"+
    "\52\234\1\252\1\236\11\252\1\236\1\252\2\236\1\266"+
    "\1\254\53\252\1\236\11\252\1\236\1\252\2\236\1\266"+
    "\1\235\53\252\1\236\11\252\1\236\1\252\2\236\1\265"+
    "\1\254\52\252\17\236\1\266\1\267\52\236\17\241\1\236"+
    "\1\260\71\241\1\66\1\260\52\241\3\0\2\4\1\0"+
    "\4\4\21\0\2\4\1\270\3\4\11\0\6\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\21\0\1\271\5\4"+
    "\11\0\6\4\2\0\11\4\17\236\1\272\1\240\52\236";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7021];
=======
    "\2\4\1\11\1\2\1\0\1\12\3\0\1\13\3\0"+
    "\1\14\3\0\1\15\1\4\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\7\4\1\5\6\0\1\42\1\43\5\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\55\1\56\1\0\1\57\1\0\1\60"+
    "\37\0\2\4\1\0\4\4\17\0\6\4\11\0\6\4"+
    "\2\0\11\4\3\0\1\4\1\5\1\61\4\4\17\0"+
    "\6\4\11\0\6\4\2\0\10\4\1\5\4\0\1\61"+
    "\63\0\1\61\3\0\1\4\1\5\1\62\4\4\17\0"+
    "\6\4\11\0\6\4\1\0\1\63\10\4\1\5\12\11"+
    "\1\64\1\0\1\65\54\11\15\0\1\66\1\67\116\0"+
    "\1\70\120\0\2\4\1\0\4\4\17\0\1\4\1\71"+
    "\4\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\17\0\6\4\11\0\6\4\2\0\6\4\1\72"+
    "\2\4\3\0\2\4\1\0\4\4\17\0\6\4\11\0"+
    "\1\4\1\73\4\4\2\0\11\4\3\0\2\4\1\0"+
    "\4\4\17\0\6\4\11\0\1\4\1\74\4\4\2\0"+
    "\11\4\21\0\1\75\52\0\2\4\1\0\4\4\17\0"+
    "\3\4\1\76\2\4\11\0\1\4\1\77\3\4\1\100"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\17\0\6\4"+
    "\11\0\1\101\5\4\2\0\3\4\1\102\5\4\3\0"+
    "\2\4\1\0\4\4\17\0\6\4\11\0\1\4\1\103"+
    "\4\4\2\0\11\4\3\0\2\4\1\0\4\4\17\0"+
    "\3\4\1\104\1\4\1\105\11\0\6\4\2\0\11\4"+
    "\3\0\2\4\1\0\4\4\17\0\3\4\1\106\1\107"+
    "\1\4\11\0\6\4\2\0\11\4\3\0\2\4\1\0"+
    "\2\4\1\110\1\4\17\0\6\4\11\0\6\4\2\0"+
    "\11\4\10\0\1\111\22\0\1\112\15\0\1\113\1\114"+
    "\1\0\1\115\12\0\1\116\4\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\5\4\1\117\2\0\2\4\1\120"+
    "\6\4\1\0\2\121\10\0\1\121\56\0\2\122\10\0"+
    "\1\122\56\0\2\123\10\0\1\123\56\0\2\124\10\0"+
    "\1\124\56\0\2\125\10\0\1\125\56\0\2\126\10\0"+
    "\1\126\77\0\1\127\47\0\2\130\10\0\1\130\56\0"+
    "\2\131\10\0\1\131\56\0\2\132\10\0\1\132\56\0"+
    "\2\133\10\0\1\133\6\0\1\134\47\0\2\135\10\0"+
    "\1\135\6\0\1\136\70\0\1\137\104\0\1\140\63\0"+
    "\1\141\111\0\1\114\14\0\1\116\1\0\13\11\1\0"+
    "\55\11\13\66\1\0\55\66\15\67\1\142\1\143\52\67"+
    "\3\0\2\4\1\0\4\4\17\0\2\4\1\144\3\4"+
    "\11\0\6\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\1\4\1\145\4\4\2\0\11\4"+
    "\3\0\2\4\1\0\2\4\1\146\1\4\17\0\6\4"+
    "\11\0\6\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\3\4\1\147\2\4\11\0\6\4\2\0\11\4"+
    "\3\0\2\4\1\0\4\4\17\0\6\4\11\0\6\4"+
    "\2\0\1\4\1\150\7\4\3\0\2\4\1\0\4\4"+
    "\17\0\2\4\1\151\3\4\11\0\6\4\2\0\11\4"+
    "\3\0\2\4\1\0\4\4\17\0\6\4\11\0\6\4"+
    "\2\0\1\152\10\4\3\0\2\4\1\0\4\4\17\0"+
    "\6\4\11\0\6\4\2\0\1\153\10\4\3\0\2\4"+
    "\1\0\4\4\17\0\6\4\11\0\6\4\2\0\2\4"+
    "\1\154\1\4\1\155\4\4\3\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\5\4\1\156\2\0\11\4\3\0"+
    "\2\4\1\0\4\4\17\0\1\4\1\157\4\4\11\0"+
    "\5\4\1\160\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\5\4\1\161\11\0\1\162\5\4\2\0\1\163"+
    "\10\4\3\0\2\4\1\0\4\4\17\0\5\4\1\164"+
    "\11\0\6\4\2\0\11\4\70\0\1\165\4\166\1\167"+
    "\3\166\2\167\2\0\1\170\17\166\2\167\13\166\2\167"+
    "\1\166\1\167\13\166\1\167\4\0\1\171\3\0\2\171"+
    "\22\0\2\171\13\0\2\171\1\0\1\171\13\0\1\171"+
    "\3\0\2\4\1\0\4\4\17\0\6\4\11\0\6\4"+
    "\2\0\1\4\1\172\7\4\3\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\2\4\1\173\3\4\2\0\11\4"+
    "\1\0\2\174\10\0\1\174\56\0\2\175\10\0\1\175"+
    "\56\0\2\176\10\0\1\176\56\0\2\177\10\0\1\177"+
    "\56\0\2\200\10\0\1\200\112\0\1\201\33\0\15\67"+
    "\1\202\1\203\67\67\1\204\1\143\52\67\1\0\2\205"+
    "\2\4\1\0\4\4\1\0\1\205\15\0\6\4\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\4\4\17\0"+
    "\1\206\5\4\11\0\6\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\17\0\4\4\1\207\1\4\11\0\6\4"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\17\0\6\4"+
    "\11\0\6\4\2\0\5\4\1\210\3\4\3\0\2\4"+
    "\1\0\4\4\17\0\2\4\1\211\3\4\11\0\6\4"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\17\0\6\4"+
    "\11\0\1\4\1\212\4\4\2\0\11\4\3\0\2\4"+
    "\1\0\4\4\17\0\3\4\1\213\2\4\11\0\6\4"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\17\0\6\4"+
    "\11\0\6\4\1\214\1\0\11\4\3\0\2\4\1\0"+
    "\4\4\17\0\5\4\1\215\11\0\6\4\2\0\11\4"+
    "\3\0\2\4\1\0\4\4\17\0\6\4\11\0\4\4"+
    "\1\216\1\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\1\217\5\4\11\0\6\4\2\0\11\4\3\0"+
    "\2\4\1\0\4\4\17\0\6\4\11\0\1\220\5\4"+
    "\2\0\11\4\3\0\2\4\1\0\4\4\17\0\6\4"+
    "\11\0\1\4\1\221\4\4\2\0\11\4\4\0\1\222"+
    "\3\0\2\222\22\0\2\222\13\0\2\222\1\0\1\222"+
    "\13\0\1\222\13\166\1\0\55\166\3\0\2\4\1\0"+
    "\4\4\17\0\6\4\11\0\1\4\1\223\4\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\17\0\6\4\11\0"+
    "\6\4\2\0\1\224\10\4\1\0\2\225\10\0\1\225"+
    "\55\0\13\226\1\67\1\226\1\202\1\227\52\226\15\230"+
    "\1\231\1\232\52\230\15\0\1\226\1\233\55\0\2\4"+
    "\1\0\4\4\17\0\6\4\11\0\5\4\1\234\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\17\0\6\4\11\0"+
    "\1\235\5\4\2\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\6\4\1\236\1\0\11\4\3\0"+
    "\2\4\1\0\4\4\17\0\2\4\1\237\3\4\11\0"+
    "\6\4\2\0\11\4\4\0\1\240\3\0\2\240\22\0"+
    "\2\240\13\0\2\240\1\0\1\240\13\0\1\240\3\0"+
    "\2\4\1\0\4\4\17\0\2\4\1\241\3\4\11\0"+
    "\6\4\2\0\11\4\13\226\1\67\1\226\1\202\1\242"+
    "\52\226\13\243\1\230\1\243\1\244\1\245\52\243\15\230"+
    "\1\246\1\232\52\230\15\233\1\243\1\247\52\233\15\230"+
    "\1\250\1\232\52\230\16\233\1\251\52\233\3\0\2\4"+
    "\1\0\4\4\17\0\1\252\5\4\11\0\6\4\2\0"+
    "\11\4\3\0\2\4\1\0\4\4\17\0\6\4\11\0"+
    "\6\4\1\253\1\0\11\4\3\0\2\4\1\0\4\4"+
    "\17\0\6\4\11\0\1\254\5\4\2\0\11\4\4\0"+
    "\1\166\3\0\2\166\22\0\2\166\13\0\2\166\1\0"+
    "\1\166\13\0\1\166\3\0\2\4\1\0\4\4\17\0"+
    "\5\4\1\255\11\0\6\4\2\0\11\4\13\226\1\67"+
    "\1\226\1\256\1\242\52\226\13\243\1\230\1\243\1\257"+
    "\1\245\65\243\1\230\1\243\1\257\1\227\65\243\1\230"+
    "\1\243\1\256\1\245\52\243\15\230\1\257\1\260\52\230"+
    "\15\233\1\230\1\251\67\233\1\67\1\251\52\233\3\0"+
    "\2\4\1\0\4\4\17\0\2\4\1\261\3\4\11\0"+
    "\6\4\2\0\11\4\3\0\2\4\1\0\4\4\17\0"+
    "\1\262\5\4\11\0\6\4\2\0\11\4\15\230\1\263"+
    "\1\232\52\230";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6612];
>>>>>>> refs/remotes/OrrenJ/master
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< HEAD
    "\10\1\1\0\1\1\1\11\1\1\1\11\4\1\4\11"+
    "\1\1\4\11\6\1\1\0\1\1\15\0\1\1\2\0"+
    "\1\11\1\0\1\1\1\0\1\11\5\1\1\11\14\1"+
    "\3\11\3\0\3\1\4\11\1\0\4\11\1\0\1\11"+
    "\6\0\25\1\1\11\1\1\1\0\5\1\5\11\3\0"+
    "\1\1\1\11\6\1\1\11\6\1\1\0\2\1\1\11"+
    "\3\0\1\1\2\0\2\1\1\11\2\1\1\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\1\11\3\1"+
    "\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
=======
    "\10\1\2\0\1\1\1\11\4\1\4\11\1\1\4\11"+
    "\6\1\1\0\1\1\17\0\1\1\2\0\1\11\1\0"+
    "\1\1\1\0\1\11\4\1\1\11\13\1\3\11\3\0"+
    "\2\1\6\11\1\0\4\11\1\0\1\11\6\0\22\1"+
    "\1\11\1\1\1\0\3\1\5\11\3\0\1\1\1\11"+
    "\6\1\1\11\5\1\1\0\2\1\1\11\3\0\1\1"+
    "\2\0\2\1\1\11\1\1\1\0\1\1\2\0\1\1"+
    "\3\0\1\1\1\0\1\1\1\11\3\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
>>>>>>> refs/remotes/OrrenJ/master
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmplLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SmplLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

<<<<<<< HEAD
      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // VARIABLE
				return new Symbol(sym.VARIABLE, yytext());
            }
          case 76: break;
          case 2: 
            { //skip newline, but reset char counter
			 yychar = 0;
            }
          case 77: break;
          case 3: 
            { // skip whitespace
            }
          case 78: break;
          case 4: 
            { // INTEGER
		    	return new Symbol(sym.INTEGER, 
					new Integer(yytext()));
            }
          case 79: break;
          case 5: 
            { return new Symbol(sym.PERIOD);
            }
          case 80: break;
          case 6: 
            { return new Symbol(sym.NEG);
            }
          case 81: break;
          case 7: 
            { return new Symbol(sym.DIV);
            }
          case 82: break;
          case 8: 
            { return new Symbol(sym.MOD);
            }
          case 83: break;
          case 9: 
            { return new Symbol(sym.COLON);
            }
          case 84: break;
          case 10: 
            { return new Symbol(sym.BNOT);
            }
          case 85: break;
          case 11: 
            { return new Symbol(sym.LBRACE);
            }
          case 86: break;
          case 12: 
            { return new Symbol(sym.RBRACE);
            }
          case 87: break;
          case 13: 
            { return new Symbol(sym.LPAREN);
            }
          case 88: break;
          case 14: 
            { return new Symbol(sym.RPAREN);
            }
          case 89: break;
          case 15: 
            { return new Symbol(sym.LBRACKET);
            }
          case 90: break;
          case 16: 
            { return new Symbol(sym.RBRACKET);
            }
          case 91: break;
          case 17: 
            { return new Symbol(sym.COMMA);
            }
          case 92: break;
          case 18: 
            { return new Symbol(sym.SEMI);
            }
          case 93: break;
          case 19: 
            { return new Symbol(sym.LSTCONCAT);
            }
          case 94: break;
          case 20: 
            { // REAL NUMBER
				return new Symbol(sym.REAL,
					new Double(yytext()));
            }
          case 95: break;
          case 21: 
            { return new Symbol(sym.STRING,
					yytext().substring(1, yytext().length()-1));
            }
          case 96: break;
          case 22: 
            { // skip comment
            }
          case 97: break;
          case 23: 
            { return new Symbol(sym.RVEC);
            }
          case 98: break;
          case 24: 
            { return new Symbol(sym.LVEC);
            }
          case 99: break;
          case 25: 
            { return new Symbol(sym.BE);
            }
          case 100: break;
          case 26: 
            { return new Symbol(sym.IF);
            }
          case 101: break;
          case 27: 
            { return new Symbol(sym.BOOL, false);
            }
          case 102: break;
          case 28: 
            { return new Symbol(sym.BOOL, true);
            }
          case 103: break;
          case 29: 
            { return new Symbol(sym.EMPTYLIST);
            }
          case 104: break;
          case 30: 
            { return new Symbol(sym.PLUS);
            }
          case 105: break;
          case 31: 
            { return new Symbol(sym.MINUS);
            }
          case 106: break;
          case 32: 
            { return new Symbol(sym.MUL);
            }
          case 107: break;
          case 33: 
            { return new Symbol(sym.POW);
            }
          case 108: break;
          case 34: 
            { return new Symbol(sym.EQ);
            }
          case 109: break;
          case 35: 
            { return new Symbol(sym.BAND);
            }
          case 110: break;
          case 36: 
            { return new Symbol(sym.BOR);
            }
          case 111: break;
          case 37: 
            { return new Symbol(sym.GT);
            }
          case 112: break;
          case 38: 
            { return new Symbol(sym.LT);
            }
          case 113: break;
          case 39: 
            { return new Symbol(sym.TAN);
            }
          case 114: break;
          case 40: 
            { return new Symbol(sym.DEF);
            }
          case 115: break;
          case 41: 
            { return new Symbol(sym.LET);
            }
          case 116: break;
          case 42: 
            { return new Symbol(sym.COT);
            }
          case 117: break;
          case 43: 
            { return new Symbol(sym.COS);
            }
          case 118: break;
          case 44: 
            { return new Symbol(sym.CAR);
            }
          case 119: break;
          case 45: 
            { return new Symbol(sym.CDR);
            }
          case 120: break;
          case 46: 
            { // BINARY INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#b", ""), 2));
            }
          case 121: break;
          case 47: 
            { return new Symbol(sym.CHARACTER,
					yytext().replace("#c",""));
            }
          case 122: break;
          case 48: 
            { // HEXADECIMAL INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#x", ""), 16));
            }
          case 123: break;
          case 49: 
            { return new Symbol(sym.SEC);
            }
          case 124: break;
          case 50: 
            { return new Symbol(sym.SIN);
            }
          case 125: break;
          case 51: 
            { return new Symbol(sym.ASSIGN);
            }
          case 126: break;
          case 52: 
            { return new Symbol(sym.GE);
            }
          case 127: break;
          case 53: 
            { return new Symbol(sym.LE);
            }
          case 128: break;
          case 54: 
            { return new Symbol(sym.NEQ);
            }
          case 129: break;
          case 55: 
            { return new Symbol(sym.LOR);
            }
          case 130: break;
          case 56: 
            { return new Symbol(sym.LNOT);
            }
          case 131: break;
          case 57: 
            { return new Symbol(sym.THEN);
            }
          case 132: break;
          case 58: 
            { return new Symbol(sym.READ);
            }
          case 133: break;
          case 59: 
            { return new Symbol(sym.LAZY);
            }
          case 134: break;
          case 60: 
            { return new Symbol(sym.LIST);
            }
          case 135: break;
          case 61: 
            { return new Symbol(sym.ELSE);
            }
          case 136: break;
          case 62: 
            { return new Symbol(sym.EQV);
            }
          case 137: break;
          case 63: 
            { return new Symbol(sym.PAIR);
            }
          case 138: break;
          case 64: 
            { return new Symbol(sym.PROC);
            }
          case 139: break;
          case 65: 
            { return new Symbol(sym.CALL);
            }
          case 140: break;
          case 66: 
            { return new Symbol(sym.CASE);
            }
          case 141: break;
          case 67: 
            { return new Symbol(sym.SIZE);
            }
          case 142: break;
          case 68: 
            { return new Symbol(sym.LAND);
            }
          case 143: break;
          case 69: 
            { return new Symbol(sym.PAIRCHECK);
            }
          case 144: break;
          case 70: 
            { return new Symbol(sym.PRINT);
            }
          case 145: break;
          case 71: 
            { return new Symbol(sym.COSEC);
            }
          case 146: break;
          case 72: 
            { return new Symbol(sym.EQUAL);
            }
          case 147: break;
          case 73: 
            { return new Symbol(sym.SUBSTR);
            }
          case 148: break;
          case 74: 
            { return new Symbol(sym.READINT);
            }
          case 149: break;
          case 75: 
            { return new Symbol(sym.PRINTLN);
            }
          case 150: break;
          default:
=======
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return new Symbol(sym.POW);
          }
        case 70: break;
        case 64: 
          { return new Symbol(sym.PAIRCHECK);
          }
        case 71: break;
        case 32: 
          { return new Symbol(sym.MOD);
          }
        case 72: break;
        case 4: 
          { // INTEGER
		    	return new Symbol(sym.INTEGER, 
					new Integer(yytext()));
          }
        case 73: break;
        case 7: 
          { return new Symbol(sym.COLON);
          }
        case 74: break;
        case 59: 
          { return new Symbol(sym.PROC);
          }
        case 75: break;
        case 19: 
          { return new Symbol(sym.STRING,
					yytext().substring(1, yytext().length()-1));
          }
        case 76: break;
        case 63: 
          { return new Symbol(sym.LAND);
          }
        case 77: break;
        case 51: 
          { return new Symbol(sym.LNOT);
          }
        case 78: break;
        case 55: 
          { return new Symbol(sym.LIST);
          }
        case 79: break;
        case 24: 
          { return new Symbol(sym.IF);
          }
        case 80: break;
        case 66: 
          { return new Symbol(sym.EQUAL);
          }
        case 81: break;
        case 49: 
          { return new Symbol(sym.NEQ);
          }
        case 82: break;
        case 14: 
          { return new Symbol(sym.RBRACKET);
          }
        case 83: break;
        case 39: 
          { return new Symbol(sym.DEF);
          }
        case 84: break;
        case 68: 
          { return new Symbol(sym.READINT);
          }
        case 85: break;
        case 34: 
          { return new Symbol(sym.EQ);
          }
        case 86: break;
        case 3: 
          { // skip whitespace
          }
        case 87: break;
        case 6: 
          { return new Symbol(sym.NEG);
          }
        case 88: break;
        case 12: 
          { return new Symbol(sym.RPAREN);
          }
        case 89: break;
        case 25: 
          { return new Symbol(sym.BOOL, false);
          }
        case 90: break;
        case 67: 
          { return new Symbol(sym.SUBSTR);
          }
        case 91: break;
        case 40: 
          { return new Symbol(sym.LET);
          }
        case 92: break;
        case 29: 
          { return new Symbol(sym.MINUS);
          }
        case 93: break;
        case 28: 
          { return new Symbol(sym.PLUS);
          }
        case 94: break;
        case 17: 
          { return new Symbol(sym.LSTCONCAT);
          }
        case 95: break;
        case 23: 
          { return new Symbol(sym.BE);
          }
        case 96: break;
        case 62: 
          { return new Symbol(sym.SIZE);
          }
        case 97: break;
        case 65: 
          { return new Symbol(sym.PRINT);
          }
        case 98: break;
        case 41: 
          { return new Symbol(sym.CAR);
          }
        case 99: break;
        case 27: 
          { return new Symbol(sym.EMPTYLIST);
          }
        case 100: break;
        case 61: 
          { return new Symbol(sym.CASE);
          }
        case 101: break;
        case 36: 
          { return new Symbol(sym.BOR);
          }
        case 102: break;
        case 47: 
          { return new Symbol(sym.GE);
          }
        case 103: break;
        case 69: 
          { return new Symbol(sym.PRINTLN);
          }
        case 104: break;
        case 56: 
          { return new Symbol(sym.ELSE);
          }
        case 105: break;
        case 9: 
          { return new Symbol(sym.LBRACE);
          }
        case 106: break;
        case 48: 
          { return new Symbol(sym.LE);
          }
        case 107: break;
        case 15: 
          { return new Symbol(sym.COMMA);
          }
        case 108: break;
        case 52: 
          { return new Symbol(sym.THEN);
          }
        case 109: break;
        case 58: 
          { return new Symbol(sym.PAIR);
          }
        case 110: break;
        case 18: 
          { // REAL NUMBER
				return new Symbol(sym.REAL,
					new Double(yytext()));
          }
        case 111: break;
        case 46: 
          { return new Symbol(sym.ASSIGN);
          }
        case 112: break;
        case 31: 
          { return new Symbol(sym.MUL);
          }
        case 113: break;
        case 54: 
          { return new Symbol(sym.LAZY);
          }
        case 114: break;
        case 45: 
          { // HEXADECIMAL INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#x", ""), 16));
          }
        case 115: break;
        case 5: 
          { return new Symbol(sym.PERIOD);
          }
        case 116: break;
        case 1: 
          { // VARIABLE
				return new Symbol(sym.VARIABLE, yytext());
          }
        case 117: break;
        case 42: 
          { return new Symbol(sym.CDR);
          }
        case 118: break;
        case 50: 
          { return new Symbol(sym.LOR);
          }
        case 119: break;
        case 16: 
          { return new Symbol(sym.SEMI);
          }
        case 120: break;
        case 37: 
          { return new Symbol(sym.GT);
          }
        case 121: break;
        case 2: 
          { //skip newline, but reset char counter
			 yychar = 0;
          }
        case 122: break;
        case 26: 
          { return new Symbol(sym.BOOL, true);
          }
        case 123: break;
        case 60: 
          { return new Symbol(sym.CALL);
          }
        case 124: break;
        case 38: 
          { return new Symbol(sym.LT);
          }
        case 125: break;
        case 43: 
          { // BINARY INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#b", ""), 2));
          }
        case 126: break;
        case 22: 
          { return new Symbol(sym.LVEC);
          }
        case 127: break;
        case 20: 
          { // skip comment
          }
        case 128: break;
        case 53: 
          { return new Symbol(sym.READ);
          }
        case 129: break;
        case 11: 
          { return new Symbol(sym.LPAREN);
          }
        case 130: break;
        case 13: 
          { return new Symbol(sym.LBRACKET);
          }
        case 131: break;
        case 44: 
          { return new Symbol(sym.CHARACTER,
					yytext().replace("#c",""));
          }
        case 132: break;
        case 21: 
          { return new Symbol(sym.RVEC);
          }
        case 133: break;
        case 10: 
          { return new Symbol(sym.RBRACE);
          }
        case 134: break;
        case 30: 
          { return new Symbol(sym.DIV);
          }
        case 135: break;
        case 57: 
          { return new Symbol(sym.EQV);
          }
        case 136: break;
        case 8: 
          { return new Symbol(sym.BNOT);
          }
        case 137: break;
        case 35: 
          { return new Symbol(sym.BAND);
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(sym.EOF);
 }
          } 
          else {
>>>>>>> refs/remotes/OrrenJ/master
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
