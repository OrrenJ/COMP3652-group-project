/* The following code was generated by JFlex 1.6.1 */

package smpl.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>smpl/syntax/SmplLexer</tt>
 */
public class SmplLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\13\1\15\1\16\1\1\22\0\1\2\1\32"+
    "\1\12\1\61\1\0\1\21\1\25\1\0\1\43\1\44\1\20\1\6"+
    "\1\47\1\7\1\5\1\17\2\73\10\4\1\23\1\50\1\31\1\24"+
    "\1\30\1\60\1\51\6\11\24\3\1\45\1\14\1\46\1\22\1\3"+
    "\1\0\1\36\1\54\1\56\1\37\1\53\1\10\1\3\1\70\1\57"+
    "\2\3\1\52\1\71\1\33\1\34\1\55\1\65\1\40\1\62\1\35"+
    "\1\64\1\66\1\3\1\72\1\67\1\63\1\41\1\26\1\42\1\27"+
    "\6\0\1\15\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\1\1\6"+
    "\1\1\1\0\1\7\1\10\1\11\1\12\5\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\1\1\0\1\1\15\0\1\24\2\0\1\1\1\25"+
    "\1\0\1\26\1\0\1\27\3\1\1\30\3\1\1\31"+
    "\5\1\1\32\6\1\1\33\1\34\1\35\1\36\1\37"+
    "\3\0\3\1\1\40\1\41\1\0\1\42\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\0\1\50\4\0\1\51"+
    "\2\0\1\1\1\52\1\1\1\53\3\1\1\54\11\1"+
    "\1\55\1\56\1\57\2\1\1\60\1\61\2\62\1\0"+
    "\1\63\1\64\1\65\2\1\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\3\0\1\26\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\1\1\102\1\1\1\103\1\104\1\105"+
    "\1\1\1\106\1\1\1\107\1\110\1\0\1\111\1\1"+
    "\1\112\3\0\1\26\2\0\1\1\1\113\1\1\1\114"+
    "\1\115\1\116\1\0\1\1\2\0\1\26\3\0\1\26"+
    "\1\0\1\1\1\117\1\1\1\120\1\26\2\0\1\121"+
    "\1\122\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\360\0\u012c\0\u012c"+
    "\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u021c\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u021c\0\u021c\0\u021c\0\u021c\0\u03c0"+
    "\0\u021c\0\u021c\0\u021c\0\u021c\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\360\0\360\0\u08e8\0\u0924\0\u021c\0\u0960\0\u099c"+
    "\0\u09d8\0\u021c\0\u0a14\0\u0a50\0\u0a8c\0\170\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u021c\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\170"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\170\0\170"+
    "\0\u021c\0\u021c\0\u021c\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u021c\0\u021c\0\u0f78\0\u021c\0\u021c\0\u0fb4\0\u021c"+
    "\0\u021c\0\u021c\0\u021c\0\u0ff0\0\u021c\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\170\0\u111c\0\u1158\0\u1194\0\170\0\u11d0\0\170"+
    "\0\u120c\0\u1248\0\u1284\0\170\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\170\0\u14dc\0\170"+
    "\0\u1518\0\u1554\0\170\0\u0e10\0\u021c\0\u1590\0\u15cc\0\u0e88"+
    "\0\170\0\170\0\u1608\0\u1644\0\u021c\0\u021c\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u021c\0\170"+
    "\0\170\0\u1770\0\170\0\170\0\u17ac\0\170\0\u17e8\0\u021c"+
    "\0\u1824\0\170\0\u1860\0\170\0\u189c\0\170\0\170\0\u18d8"+
    "\0\170\0\u1914\0\u021c\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\170\0\u1af4\0\u021c\0\u1b30\0\170\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u111c"+
    "\0\u1d4c\0\u1d88\0\u021c\0\u1dc4\0\170\0\u16bc\0\u1c5c\0\u1e00"+
    "\0\170\0\170\0\u1cd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\4\1\12\1\2\2\0\1\3\1\13\1\0"+
    "\1\14\1\0\1\15\3\0\1\16\3\0\1\17\1\4"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\0\1\43\1\44\10\4\1\5"+
    "\6\0\1\45\1\46\10\0\1\47\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\0\1\55\1\56\1\57\1\0"+
    "\1\60\1\0\1\61\40\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\6\4\2\0\12\4\3\0\1\4\1\5"+
    "\1\62\4\4\21\0\6\4\11\0\6\4\2\0\11\4"+
    "\1\5\4\0\1\62\66\0\1\62\3\0\1\4\1\5"+
    "\1\63\4\4\21\0\6\4\11\0\6\4\1\0\1\64"+
    "\11\4\1\5\3\0\2\4\1\0\4\4\21\0\1\4"+
    "\1\65\4\4\11\0\6\4\2\0\12\4\12\12\1\66"+
    "\1\0\1\67\57\12\17\0\1\70\1\71\215\0\1\72"+
    "\30\0\2\4\1\0\4\4\21\0\1\4\1\73\4\4"+
    "\11\0\6\4\2\0\12\4\3\0\2\4\1\0\4\4"+
    "\21\0\3\4\1\74\2\4\11\0\6\4\2\0\6\4"+
    "\1\75\3\4\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\6\4\2\0\1\76\11\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\1\4\1\77\3\4\1\100"+
    "\2\0\12\4\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\1\4\1\101\4\4\2\0\12\4\23\0\1\102"+
    "\53\0\2\4\1\0\4\4\21\0\3\4\1\103\2\4"+
    "\11\0\1\4\1\104\3\4\1\105\2\0\12\4\3\0"+
    "\2\4\1\0\4\4\21\0\6\4\11\0\1\106\5\4"+
    "\2\0\3\4\1\107\6\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\1\4\1\110\4\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\3\4\1\111\1\4"+
    "\1\112\11\0\1\113\5\4\2\0\12\4\3\0\2\4"+
    "\1\0\4\4\21\0\1\4\1\114\1\4\1\115\1\116"+
    "\1\4\11\0\6\4\2\0\12\4\3\0\2\4\1\0"+
    "\2\4\1\117\1\4\21\0\1\120\5\4\11\0\6\4"+
    "\2\0\12\4\10\0\1\121\24\0\1\122\15\0\1\123"+
    "\1\124\1\0\1\125\13\0\1\126\4\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\1\4\1\127\3\4\1\130"+
    "\2\0\2\4\1\131\7\4\1\0\2\132\10\0\1\132"+
    "\2\0\1\132\56\0\2\133\10\0\1\133\2\0\1\133"+
    "\11\0\1\134\44\0\2\135\10\0\1\135\2\0\1\135"+
    "\56\0\2\136\10\0\1\136\2\0\1\136\101\0\1\137"+
    "\50\0\2\140\10\0\1\140\2\0\1\140\56\0\2\141"+
    "\10\0\1\141\2\0\1\141\56\0\2\142\10\0\1\142"+
    "\2\0\1\142\56\0\2\143\10\0\1\143\2\0\1\143"+
    "\5\0\1\144\50\0\2\145\10\0\1\145\2\0\1\145"+
    "\5\0\1\146\73\0\1\147\107\0\1\150\66\0\1\151"+
    "\114\0\1\124\15\0\1\126\4\0\2\4\1\0\4\4"+
    "\21\0\5\4\1\152\11\0\6\4\2\0\12\4\1\12"+
    "\1\0\11\12\1\0\1\12\2\0\55\12\1\70\1\0"+
    "\11\70\1\0\1\70\2\0\55\70\17\71\1\153\1\154"+
    "\53\71\3\0\2\4\1\0\4\4\21\0\2\4\1\155"+
    "\3\4\11\0\6\4\2\0\12\4\3\0\2\4\1\0"+
    "\4\4\21\0\1\156\5\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\1\4"+
    "\1\157\4\4\2\0\12\4\3\0\2\4\1\0\2\4"+
    "\1\160\1\4\21\0\6\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\2\4\1\161\1\4\21\0\6\4"+
    "\11\0\6\4\2\0\12\4\3\0\2\4\1\0\4\4"+
    "\21\0\3\4\1\162\2\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\6\4"+
    "\2\0\1\4\1\163\10\4\3\0\2\4\1\0\4\4"+
    "\21\0\2\4\1\164\3\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\6\4"+
    "\2\0\1\165\6\4\1\166\2\4\3\0\2\4\1\0"+
    "\4\4\21\0\6\4\11\0\6\4\2\0\1\167\11\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\6\4"+
    "\2\0\2\4\1\170\1\4\1\171\5\4\3\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\5\4\1\172\2\0"+
    "\12\4\3\0\2\4\1\0\4\4\21\0\1\4\1\173"+
    "\4\4\11\0\5\4\1\174\2\0\12\4\3\0\2\4"+
    "\1\0\4\4\21\0\1\4\1\175\4\4\11\0\6\4"+
    "\2\0\12\4\3\0\2\4\1\0\4\4\21\0\2\4"+
    "\1\176\3\4\11\0\6\4\2\0\1\177\11\4\3\0"+
    "\2\4\1\0\4\4\21\0\5\4\1\200\11\0\1\201"+
    "\5\4\2\0\1\202\11\4\3\0\2\4\1\0\4\4"+
    "\21\0\5\4\1\203\11\0\6\4\2\0\12\4\73\0"+
    "\1\204\4\205\1\206\3\205\2\206\2\0\1\207\21\205"+
    "\2\206\13\205\2\206\1\205\1\206\14\205\1\206\4\0"+
    "\1\210\3\0\2\210\24\0\2\210\13\0\2\210\1\0"+
    "\1\210\14\0\1\210\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\4\4\1\211\1\4\2\0\12\4\3\0"+
    "\2\4\1\0\4\4\21\0\1\212\5\4\11\0\6\4"+
    "\2\0\1\4\1\213\10\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\2\4\1\214\3\4\2\0\12\4"+
    "\1\0\2\215\10\0\1\215\2\0\1\215\56\0\2\216"+
    "\10\0\1\216\2\0\1\216\56\0\2\217\10\0\1\217"+
    "\2\0\1\217\56\0\2\220\10\0\1\220\2\0\1\220"+
    "\56\0\2\221\10\0\1\221\2\0\1\221\56\0\2\222"+
    "\10\0\1\222\2\0\1\222\114\0\1\223\34\0\17\71"+
    "\1\224\1\225\72\71\1\226\1\154\53\71\1\0\2\227"+
    "\2\4\1\0\4\4\1\0\1\227\2\0\1\227\14\0"+
    "\6\4\11\0\6\4\2\0\12\4\3\0\2\4\1\0"+
    "\4\4\21\0\1\230\5\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\2\4\1\231\1\4\21\0\6\4"+
    "\11\0\6\4\2\0\12\4\3\0\2\4\1\0\4\4"+
    "\21\0\4\4\1\232\1\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\6\4"+
    "\2\0\5\4\1\233\4\4\3\0\2\4\1\0\4\4"+
    "\21\0\2\4\1\234\3\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\5\4"+
    "\1\235\2\0\12\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\1\4\1\236\4\4\2\0\12\4\3\0"+
    "\2\4\1\0\4\4\21\0\3\4\1\237\2\4\11\0"+
    "\6\4\2\0\12\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\6\4\1\240\1\0\12\4\3\0\2\4"+
    "\1\0\4\4\21\0\5\4\1\241\11\0\6\4\2\0"+
    "\12\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\4\4\1\242\1\4\2\0\12\4\3\0\2\4\1\0"+
    "\4\4\21\0\1\243\5\4\11\0\6\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\2\4\1\244\3\4"+
    "\11\0\6\4\2\0\12\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\1\4\1\245\4\4\2\0\12\4"+
    "\3\0\2\4\1\0\4\4\21\0\6\4\11\0\1\246"+
    "\5\4\2\0\12\4\3\0\2\4\1\0\4\4\21\0"+
    "\6\4\11\0\1\4\1\247\4\4\2\0\12\4\4\0"+
    "\1\250\3\0\2\250\24\0\2\250\13\0\2\250\1\0"+
    "\1\250\14\0\1\250\1\205\1\0\11\205\1\0\1\205"+
    "\2\0\55\205\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\1\4\1\251\4\4\2\0\12\4\3\0\2\4"+
    "\1\0\4\4\21\0\6\4\11\0\6\4\2\0\1\252"+
    "\11\4\1\0\2\253\10\0\1\253\2\0\1\253\55\0"+
    "\1\254\1\71\11\254\1\71\1\254\2\71\1\224\1\255"+
    "\53\254\17\256\1\257\1\260\53\256\17\0\1\254\1\261"+
    "\56\0\2\4\1\0\4\4\21\0\6\4\11\0\5\4"+
    "\1\262\2\0\12\4\3\0\2\4\1\0\4\4\21\0"+
    "\2\4\1\263\3\4\11\0\6\4\2\0\12\4\3\0"+
    "\2\4\1\0\4\4\21\0\6\4\11\0\1\264\5\4"+
    "\2\0\12\4\3\0\2\4\1\0\4\4\21\0\6\4"+
    "\11\0\6\4\1\265\1\0\12\4\3\0\2\4\1\0"+
    "\4\4\21\0\2\4\1\266\3\4\11\0\6\4\2\0"+
    "\12\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\4\4\1\267\1\4\2\0\12\4\4\0\1\270\3\0"+
    "\2\270\24\0\2\270\13\0\2\270\1\0\1\270\14\0"+
    "\1\270\3\0\2\4\1\0\4\4\21\0\2\4\1\271"+
    "\3\4\11\0\6\4\2\0\12\4\1\254\1\71\11\254"+
    "\1\71\1\254\2\71\1\224\1\272\53\254\1\273\1\256"+
    "\11\273\1\256\1\273\2\256\1\274\1\275\53\273\17\256"+
    "\1\276\1\260\53\256\17\261\1\273\1\277\53\261\17\256"+
    "\1\300\1\260\53\256\20\261\1\301\53\261\3\0\2\4"+
    "\1\0\4\4\21\0\1\302\5\4\11\0\6\4\2\0"+
    "\12\4\3\0\2\4\1\0\4\4\21\0\6\4\11\0"+
    "\6\4\1\303\1\0\12\4\3\0\2\4\1\0\4\4"+
    "\21\0\6\4\11\0\1\304\5\4\2\0\12\4\4\0"+
    "\1\205\3\0\2\205\24\0\2\205\13\0\2\205\1\0"+
    "\1\205\14\0\1\205\3\0\2\4\1\0\4\4\21\0"+
    "\5\4\1\305\11\0\6\4\2\0\12\4\1\254\1\71"+
    "\11\254\1\71\1\254\2\71\1\306\1\272\53\254\1\273"+
    "\1\256\11\273\1\256\1\273\2\256\1\307\1\275\54\273"+
    "\1\256\11\273\1\256\1\273\2\256\1\307\1\255\54\273"+
    "\1\256\11\273\1\256\1\273\2\256\1\306\1\275\53\273"+
    "\17\256\1\307\1\310\53\256\17\261\1\256\1\301\72\261"+
    "\1\71\1\301\53\261\3\0\2\4\1\0\4\4\21\0"+
    "\2\4\1\311\3\4\11\0\6\4\2\0\12\4\3\0"+
    "\2\4\1\0\4\4\21\0\1\312\5\4\11\0\6\4"+
    "\2\0\12\4\17\256\1\313\1\260\53\256";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\1\1\0\1\1\1\11\1\1\1\11\5\1\4\11"+
    "\1\1\4\11\6\1\1\0\1\1\15\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\11\7\1\1\11"+
    "\16\1\3\11\3\0\3\1\2\11\1\0\2\11\1\0"+
    "\4\11\1\0\1\11\4\0\1\1\2\0\30\1\1\11"+
    "\1\1\1\0\5\1\6\11\3\0\1\1\1\11\10\1"+
    "\1\11\7\1\1\0\2\1\1\11\3\0\1\1\2\0"+
    "\3\1\1\11\2\1\1\0\1\1\2\0\1\1\3\0"+
    "\1\1\1\0\1\1\1\11\3\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // VARIABLE
				return new Symbol(sym.VARIABLE, yytext());
            }
          case 83: break;
          case 2: 
            { //skip newline, but reset char counter
			 yychar = 0;
            }
          case 84: break;
          case 3: 
            { // skip whitespace
            }
          case 85: break;
          case 4: 
            { // INTEGER
		    	return new Symbol(sym.INTEGER, 
					new Integer(yytext()));
            }
          case 86: break;
          case 5: 
            { return new Symbol(sym.PERIOD);
            }
          case 87: break;
          case 6: 
            { return new Symbol(sym.NEG);
            }
          case 88: break;
          case 7: 
            { return new Symbol(sym.DIV);
            }
          case 89: break;
          case 8: 
            { return new Symbol(sym.MOD);
            }
          case 90: break;
          case 9: 
            { return new Symbol(sym.COLON);
            }
          case 91: break;
          case 10: 
            { return new Symbol(sym.BNOT);
            }
          case 92: break;
          case 11: 
            { return new Symbol(sym.LBRACE);
            }
          case 93: break;
          case 12: 
            { return new Symbol(sym.RBRACE);
            }
          case 94: break;
          case 13: 
            { return new Symbol(sym.LPAREN);
            }
          case 95: break;
          case 14: 
            { return new Symbol(sym.RPAREN);
            }
          case 96: break;
          case 15: 
            { return new Symbol(sym.LBRACKET);
            }
          case 97: break;
          case 16: 
            { return new Symbol(sym.RBRACKET);
            }
          case 98: break;
          case 17: 
            { return new Symbol(sym.COMMA);
            }
          case 99: break;
          case 18: 
            { return new Symbol(sym.SEMI);
            }
          case 100: break;
          case 19: 
            { return new Symbol(sym.LSTCONCAT);
            }
          case 101: break;
          case 20: 
            { // REAL NUMBER
				return new Symbol(sym.REAL,
					new Double(yytext()));
            }
          case 102: break;
          case 21: 
            { return new Symbol(sym.STRING,
					yytext().substring(1, yytext().length()-1));
            }
          case 103: break;
          case 22: 
            { // skip comment
            }
          case 104: break;
          case 23: 
            { return new Symbol(sym.RVEC);
            }
          case 105: break;
          case 24: 
            { return new Symbol(sym.AS);
            }
          case 106: break;
          case 25: 
            { return new Symbol(sym.LVEC);
            }
          case 107: break;
          case 26: 
            { return new Symbol(sym.BE);
            }
          case 108: break;
          case 27: 
            { return new Symbol(sym.IF);
            }
          case 109: break;
          case 28: 
            { return new Symbol(sym.IN);
            }
          case 110: break;
          case 29: 
            { return new Symbol(sym.BOOL, false);
            }
          case 111: break;
          case 30: 
            { return new Symbol(sym.BOOL, true);
            }
          case 112: break;
          case 31: 
            { return new Symbol(sym.EMPTYLIST);
            }
          case 113: break;
          case 32: 
            { return new Symbol(sym.PLUS);
            }
          case 114: break;
          case 33: 
            { return new Symbol(sym.MINUS);
            }
          case 115: break;
          case 34: 
            { return new Symbol(sym.MUL);
            }
          case 116: break;
          case 35: 
            { return new Symbol(sym.POW);
            }
          case 117: break;
          case 36: 
            { return new Symbol(sym.EQ);
            }
          case 118: break;
          case 37: 
            { return new Symbol(sym.BAND);
            }
          case 119: break;
          case 38: 
            { return new Symbol(sym.BOR);
            }
          case 120: break;
          case 39: 
            { return new Symbol(sym.GT);
            }
          case 121: break;
          case 40: 
            { return new Symbol(sym.LT);
            }
          case 122: break;
          case 41: 
            { return new Symbol(sym.FOR);
            }
          case 123: break;
          case 42: 
            { return new Symbol(sym.TAN);
            }
          case 124: break;
          case 43: 
            { return new Symbol(sym.DEF);
            }
          case 125: break;
          case 44: 
            { return new Symbol(sym.LET);
            }
          case 126: break;
          case 45: 
            { return new Symbol(sym.COT);
            }
          case 127: break;
          case 46: 
            { return new Symbol(sym.COS);
            }
          case 128: break;
          case 47: 
            { return new Symbol(sym.CAR);
            }
          case 129: break;
          case 48: 
            { return new Symbol(sym.CDR);
            }
          case 130: break;
          case 49: 
            { // BINARY INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#b", ""), 2));
            }
          case 131: break;
          case 50: 
            { return new Symbol(sym.CHARACTER,
					yytext().replace("#c",""));
            }
          case 132: break;
          case 51: 
            { // HEXADECIMAL INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#x", ""), 16));
            }
          case 133: break;
          case 52: 
            { return new Symbol(sym.SEC);
            }
          case 134: break;
          case 53: 
            { return new Symbol(sym.SIN);
            }
          case 135: break;
          case 54: 
            { return new Symbol(sym.APPROACHES);
            }
          case 136: break;
          case 55: 
            { return new Symbol(sym.ASSIGN);
            }
          case 137: break;
          case 56: 
            { return new Symbol(sym.GE);
            }
          case 138: break;
          case 57: 
            { return new Symbol(sym.LE);
            }
          case 139: break;
          case 58: 
            { return new Symbol(sym.NEQ);
            }
          case 140: break;
          case 59: 
            { return new Symbol(sym.LOR);
            }
          case 141: break;
          case 60: 
            { return new Symbol(sym.LNOT);
            }
          case 142: break;
          case 61: 
            { return new Symbol(sym.THEN);
            }
          case 143: break;
          case 62: 
            { return new Symbol(sym.DIFFERENTIATE);
            }
          case 144: break;
          case 63: 
            { return new Symbol(sym.READ);
            }
          case 145: break;
          case 64: 
            { return new Symbol(sym.LAZY);
            }
          case 146: break;
          case 65: 
            { return new Symbol(sym.LIST);
            }
          case 147: break;
          case 66: 
            { return new Symbol(sym.ELSE);
            }
          case 148: break;
          case 67: 
            { return new Symbol(sym.EQV);
            }
          case 149: break;
          case 68: 
            { return new Symbol(sym.PAIR);
            }
          case 150: break;
          case 69: 
            { return new Symbol(sym.PROC);
            }
          case 151: break;
          case 70: 
            { return new Symbol(sym.PLOT);
            }
          case 152: break;
          case 71: 
            { return new Symbol(sym.CALL);
            }
          case 153: break;
          case 72: 
            { return new Symbol(sym.CASE);
            }
          case 154: break;
          case 73: 
            { return new Symbol(sym.SIZE);
            }
          case 155: break;
          case 74: 
            { return new Symbol(sym.LAND);
            }
          case 156: break;
          case 75: 
            { return new Symbol(sym.LIMIT);
            }
          case 157: break;
          case 76: 
            { return new Symbol(sym.PAIRCHECK);
            }
          case 158: break;
          case 77: 
            { return new Symbol(sym.PRINT);
            }
          case 159: break;
          case 78: 
            { return new Symbol(sym.COSEC);
            }
          case 160: break;
          case 79: 
            { return new Symbol(sym.EQUAL);
            }
          case 161: break;
          case 80: 
            { return new Symbol(sym.SUBSTR);
            }
          case 162: break;
          case 81: 
            { return new Symbol(sym.READINT);
            }
          case 163: break;
          case 82: 
            { return new Symbol(sym.PRINTLN);
            }
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
